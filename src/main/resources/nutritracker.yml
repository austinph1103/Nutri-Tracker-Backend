openapi: "3.0.0"
info:
  version: 1.0.0
  title: NutriTracker
  license:
    name: MIT
servers:
  - url: http://localhost:8080/
paths:
  #  USER ENDPOINTS
  /user-profile:
    get:
      summary: Get all user profiles for debugging purposes.
      operationId: getUsers
      tags:
        - users
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserProfile"
              examples:
                generic_sample:
                  $ref: "#/components/examples/GenericUserProfiles"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                generic_sample:
                  $ref: "#/components/examples/Response400"
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                generic_sample:
                  $ref: "#/components/examples/Response500Default"
  /user-profile/{user-id}:
    get:
      summary: Get a user profile with the specified userId
      operationId: getUserById
      parameters:
        - name: user-id
          in: path
          description: The ID of the user to retrieve
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - users
      responses:
        '200':
          description: User retrieved successfully
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-profile/delete/{user-id}:
    delete:
      summary: Delete a user profile with the specified userId
      operationId: deleteUserById
      parameters:
        - name: user-id
          in: path
          description: The ID of the user to delete
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - users
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-profile/update/{user-id}:
    put:
      summary: Update a user profile with the specified userId
      operationId: updateUserById
      parameters:
        - name: user-id
          in: path
          description: The ID of the user to update
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - users
      requestBody:
        description: User profile data to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-profile/create:
    post:
      summary: Create a User Profile
      operationId: createUser
      tags:
        - users
      requestBody:
        description: User profile data to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # INGREDIENTS
  /ingredients/add/{meal-id}:
    post:
      summary: Add some ingredients to a specific meal id
      operationId: addIngredients
      parameters:
        - name: meal-id
          in: path
          description: The meal id in which the ingredients is added to
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - ingredients
      requestBody:
        description: ingredients to be added to a specific meal id
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ingredients"
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # DATE
  /date/update/{date-id}:
    put:
      summary: Update a specific logged date by dateId
      operationId: updateDateById
      parameters:
        - name: date-id
          in: path
          description: The logged date ID to retrieve
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - date
      requestBody:
        description: Logged Date for update by ID
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Date"
      responses:
        '200':
          description: Logged date ID retrieved successfully
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Date"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /date/{date-log}:
    get:
      summary: Get a specific logged date
      operationId: getDate
      parameters:
        - name: date-log
          in: path
          description: The logged date to retrieve
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - date
      responses:
        '200':
          description: Logged date retrieved successfully
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Date"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  #  MEALS
  /meals/{meal-id}:
    get:
      summary: Get a specific with the specified mealId
      operationId: getMealById
      parameters:
        - name: meal-id
          in: path
          description: The ID of the meal to retrieve
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - meals
      responses:
        '200':
          description: Meal retrieved successfully
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meals"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /meals/update/{meal-type}:
    put:
      summary: Update a mealType
      operationId: updateMealType
      parameters:
        - name: meal-type
          in: path
          description: The type of meal to retrieve
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - meals
      requestBody:
        description: The meal type to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meals"
      responses:
        '200':
          description: MealType retrieved successfully
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meals"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /meals/add/{date-id}:
    post:
      summary: Add a meal to a specified date-id
      operationId: addMeal
      parameters:
        - name: date-id
          in: path
          description: The date-id in which the meal is added to
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - meals
      requestBody:
        description: A specific meal to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meals"
      responses:
        '201':
          description: Meal added successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: Meal already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

#user-id is auto-incremented so no need to be included
components:
  schemas:
    UserProfile:
      type: object
      required:
        - name
        - dob
        - sex
        - emails
        - height
        - weight
      properties:
        name:
          type: string
          description: Name of the user
        dob:
          type: string
          format: string
          description: Date of birth of the user
        sex:
          type: string
          format: string
          description: Gender of the user
        emails:
          type: string
          format: string
          description: An email address associated with the user
        height:
          type: number
          format: double
          description: Height of user in cm
        weight:
          type: number
          format: double
          description: Weight of user in kg
        bloodType:
          type: string
          enum: [ A, B, O, AB ]
          description: Blood type of user
    Meals:
      type: object
      required:
        - mealType
      properties:
        mealType:
          type: string
          format: string
          description: Type of meal added (breakfast, lunch or dinner)
    Ingredients:
      type: object
      required:
        - name
        - quantity
      properties:
        name:
          type: string
          format: string
          description: Name of the ingredients
        quantity:
          type: number
          format: double
          description: Quantity of the ingredients
    Date:
      type: object
      required:
        - dateLog
      properties:
        dateLog:
          type: string
          format: date
          description: Date logged by user

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  examples:
    GenericUserProfiles:
      summary: UserProfile(s) example
      value:
        - userId: 123
          name: John Doe
          dob: 1970-01-01
          sex: male
          emails:
            - john.doe@email.com
          height: 160
          weight: 85
          bloodType: O
    Response400:
      summary: 400 Response example
      value:
        code: 400
        message: "This is a bad request."
    Response500Default:
      summary: 500/Default Response example
      value:
        code: 500
        message: "There is something wrong with our API. Please try again later."
