openapi: "3.0.0"
info:
  version: 1.0.0
  title: NutriTracker
  license:
    name: MIT
servers:
  - url: http://localhost:8080/
paths:
  /user-profile:
    get:
      summary: Get all user profiles for debugging purposes.
      operationId: getUsers
      tags:
        - users
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserProfile"
              examples:
                generic_sample:
                  $ref: "#/components/examples/GenericUserProfiles"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                generic_sample:
                  $ref: "#/components/examples/Response400"
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                generic_sample:
                  $ref: "#/components/examples/Response500Default"
  /user-profile/{user-id}:
    get:
      summary: Get an user profile with according userId
      operationId: getUserById
      parameters:
        - name: user-id
          in: path
          description: The id of user to retrieve
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - users
      responses:
        '200':
          description: User retrieved successfully
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
#  /user-profile/delete:
    delete:
      summary: Delete a user profile with the specified userId
      operationId: deleteUserById
      parameters:
        - name: user-id
          in: path
          description: The ID of the user to delete
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - users
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update a user profile with the specified userId
      operationId: updateUserById
      parameters:
        - name: user-id
          in: path
          description: The ID of the user to update
          required: true
          schema:
            type: integer
            format: int32
      tags:
        - users
      requestBody:
        description: User profile data to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user-profile/create:
    post:
      summary: Create an User Profile
      operationId: createUser
      tags:
        - users
      responses:
        '201':
          description: Null response
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

#  /meals/{mealID}:
#    get:
#      summary: Info for a specific meal
#      operationId: showMealById
#      tags:
#        - meals
#      parameters:
#        - name: mealID
#          in: path
#          required: true
#          description: The id of the meal to retrieve
#          schema:
#            type: string
#      responses:
#        '200':
#          description: Expected response to a valid request
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Meals"
#        default:
#          description: unexpected error
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Error"
components:
  schemas:
    UserProfile:
      type: object
      required:
        - userId
        - name
      properties:
        userId:
          type: integer
          description: ID of the user
        name:
          type: string
          description: Name of the user
        dob:
          type: string
          format: date
          description: Date of birth of the user
        sex:
          type: string
          enum: [ male, female, other ]
          description: Gender of the user
        emails:
          type: array
          items:
            type: string
          description: List of email addresses associated with the user
        height:
          type: number
          format: double
          description: Height of user in cm
        weight:
          type: number
          format: double
          description: Weight of user in cm
        bloodType:
          type: string
          enum: [ A, B, O, AB ]
          description: Blood type of user
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  examples:
    GenericUserProfiles:
      summary: UserProfile(s) example
      value:
        - userId: abc123
          name: John Doe
          dob: 01-01-1970
          sex: male
          emails: john.doe@email.com
          height: 160
          weight: 85
          bloodType: O
    Response400:
      summary: 400 Response example
      value:
        code: 400
        message: "This is a bad request."
    Response500Default:
      summary: 500/Default Response example
      value:
        code: 500
        message: "There is something wrong with our API. Please try again later."
